openapi: 3.0.3
info:
  title: Encrypt Decrypt message
  description: POC para mostrar la funcionalidad de encriptacion y desencriptacion de mensajes
  termsOfService: http://swagger.io/terms/
  contact:
    email: edjacome@pichincha.com
  version: 0.0.1
servers:
  - url: http://localhost:8080/v1
tags:
  - name: person
    description: Administracion de personas
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /cliente:
    post:
      tags:
        - cliente
      summary: Add a new cliente
      description: Add a new cliente
      operationId: addCliente
      requestBody:
        description: Create a new cliente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClienteDto'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClienteDto'
        '405':
          description: Invalid input
    get:
      tags:
        - cliente
      summary: Get all clientes
      description: Get a list of all clientes
      operationId: getAllClientes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClienteDto'
  /cliente/{idCliente}:
    get:
      tags:
        - cliente
      summary: Finds Person by id
      description: Get person by id
      operationId: findPersonByIdCliente
      parameters:
        - name: idCliente
          in: path
          description: Name values that need to be considered for filter
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClienteDto'
        '400':
          description: Invalid name value
    put:
      tags:
        - cliente
      summary: Update an existing cliente
      description: Update an existing cliente by Id
      operationId: updatePersonByIdCliente
      parameters:
        - name: idCliente
          in: path
          description: Name values that need to be considered for filter
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent cliente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClienteDto'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClienteDto'
        '400':
          description: Invalid ID supplied
        '404':
          description: Cliente not found
        '405':
          description: Validation exception
  /vehiculos:
    post:
      tags:
        - vehiculos
      summary: Agregar un nuevo vehículo
      description: Agregar un nuevo vehículo
      operationId: addVehiculo
      requestBody:
        description: Crear un nuevo vehículo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehiculoDto'
        required: true
      responses:
        '201':
          description: Operación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehiculoDto'
        '405':
          description: Entrada no válida
    get:
      tags:
        - vehiculos
      summary: Obtener todos los vehículos
      description: Recuperar una lista de todos los vehículos
      operationId: getAllVehiculos
      responses:
        '200':
          description: Operación exitosa
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehiculoDto'
        '404':
          description: No se encontraron vehículos
  /vehiculos/{idVehiculo}:
    get:
      tags:
        - vehiculos
      summary: Obtener vehículo por ID
      description: Obtener vehículo por ID
      operationId: findVehiculoById
      parameters:
        - name: idVehiculo
          in: path
          description: ID del vehículo a obtener
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehiculoDto'
        '400':
          description: Valor de ID no válido
        '404':
          description: Vehículo no encontrado
    put:
      tags:
        - vehiculos
      summary: Actualizar un vehículo existente
      description: Actualizar un vehículo existente por ID
      operationId: updateVehiculoById
      parameters:
        - name: idVehiculo
          in: path
          description: ID del vehículo a actualizar
          required: true
          schema:
            type: string
      requestBody:
        description: Actualizar un vehículo existente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehiculoDto'
        required: true
      responses:
        '200':
          description: Operación exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehiculoDto'
        '400':
          description: ID no válido suministrado
        '404':
          description: Vehículo no encontrado
        '405':
          description: Excepción de validación
  /patio:
    post:
      tags:
        - patio
      summary: Add a new patio
      description: Add a new patio
      operationId: addPatio
      requestBody:
        description: Create a new patio
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatiosDto'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatiosDto'
        '405':
          description: Invalid input
    get:
      tags:
        - patio
      summary: Get all patios
      description: Retrieve a list of all patios
      operationId: getAllPatios
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PatiosDto'
        '404':
          description: No patios found
  /patio/{idPatio}:
    get:
      tags:
        - patio
      summary: Get patio by id
      description: Get patio by id
      operationId: findPatioByIdPatio
      parameters:
        - name: idPatio
          in: path
          description: ID of the patio to get
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatiosDto'
        '400':
          description: Invalid ID value
        '404':
          description: Patio not found
    put:
      tags:
        - patio
      summary: Update an existing patio
      description: Update an existing patio by ID
      operationId: updatePatioById
      parameters:
        - name: idPatio
          in: path
          description: ID of the patio to update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existing patio
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatiosDto'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatiosDto'
        '400':
          description: Invalid ID supplied
        '404':
          description: Patio not found
        '405':
          description: Validation exception

components:
  schemas:
    PayloadDto:
      type: object
      properties:
        messageUuuid:
          type: string
        key:
          type: string
        body:
          type: string
    PersonDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345'
    ClienteDto:
      type: object
      properties:
        fechaNacimiento:
          type: string
          format: date
          example: '1990-03-12'
          description: 'Fecha de nacimiento en formato YYYY-MM-DD.'
        sujetoCredito:
          type: boolean
          example: true
          description: 'Indica si el cliente es sujeto de crédito.'
        idCliente:
          type: integer
          format: int64
          example: 1
          description: 'Identificador único del cliente.'
        apellidos:
          type: string
          example: 'González'
          description: 'Apellidos del cliente.'
        direccion:
          type: string
          example: 'Calle 123, Apt. 456'
          description: 'Dirección del cliente.'
        estadoCivil:
          type: string
          example: 'Soltero'
          description: 'Estado civil del cliente.'
        identificacion:
          type: string
          example: '1053456789'
          description: 'Número de identificación del cliente.'
        identificacionConyugue:
          type: string
          example: '75105163'
          description: 'Número de identificación del cónyuge.'
        nombreConyugue:
          type: string
          example: 'Adriana Posada'
          description: 'Nombre del cónyuge.'
        nombres:
          type: string
          example: 'Carlos'
          description: 'Nombres del cliente.'
        telefono:
          type: string
          example: '555-1234'
          description: 'Número de teléfono del cliente.'
    PatiosDto:
      type: object
      properties:
        idPatio:
          type: integer
          format: int64
          example: 1
          description: 'Identificador único del patio.'
        direccion:
          type: string
          example: 'Dirección del patio.'
          description: 'Dirección del patio.'
        nombre:
          type: string
          example: 'Nombre del patio.'
          description: 'Nombre del patio.'
        numeroPuntoVenta:
          type: string
          example: 'Número del punto de venta.'
          description: 'Número del punto de venta.'
        telefono:
          type: string
          example: 'Número de teléfono del patio.'
          description: 'Número de teléfono del patio.'
    VehiculoDto:
      type: object
      properties:
        idMarca:
          type: integer
          format: int64
          example: 1
          description: 'Identificador único de la marca del vehículo.'
        nombreMarca:
          type: string
        idVehiculo:
          type: integer
          format: int64
          example: 1
          description: 'Identificador único del vehículo.'
        avaluo:
          type: string
          example: '30000 USD'
          description: 'Valor de avalúo del vehículo.'
        cilindraje:
          type: string
          example: '2000 cc'
          description: 'Cilindraje del vehículo.'
        modelo:
          type: string
          example: '2022'
          description: 'Modelo del vehículo.'
        numeroChasis:
          type: string
          example: 'ABC123XYZ456'
          description: 'Número de chasis del vehículo.'
        placa:
          type: string
          example: 'ABC123'
          description: 'Placa del vehículo.'
        tipo:
          type: string
          example: 'Sedán'
          description: 'Tipo de vehículo.'
 